name: Publish

on:
  workflow_dispatch:
    inputs:
      release_branch:
        description: "Staging branch to run release from"

jobs:
  build-rs:
    name: Build Rust
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: "x86_64-apple-darwin"
            lib-cache-key: camer-lib-darwin-${{ inputs.release_branch }}
          - host: macos-latest
            target: "aarch64-apple-darwin"
            lib-cache-key: camer-lib-darwin-${{ inputs.release_branch }}
          - host: ubuntu-latest
            target: "x86_64-unknown-linux-gnu"
            lib-cache-key: camer-lib-cross-${{ inputs.release_branch }}
          - host: ubuntu-latest
            target: "aarch64-unknown-linux-gnu"
            lib-cache-key: camer-lib-cross-${{ inputs.release_branch }}
            rustflags: 'RUSTFLAGS="-C linker=aarch64-linux-gnu-gcc"'
            setup: "sudo apt-get install -y gcc-aarch64-linux-gnu binutils-aarch64-linux-gnu"
          - host: windows-latest
            target: "x86_64-pc-windows-gnu"
            lib-cache-key: camer-lib-cross-${{ inputs.release_branch }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "${{ inputs.release_branch }}"

      - name: Install
        uses: actions-rs/toolchain@v1
        if: ${{ !matrix.settings.docker }}
        with:
          profile: minimal
          override: true
          target: ${{ matrix.settings.target }}
      
      - name: Build Setup
        if: ${{ matrix.settings.setup }}
        run: ${{ matrix.settings.setup }}
        
      - name: Build
        run: ${{ matrix.settings.rustflags }} cargo build --release -p camer --target ${{ matrix.settings.target }}
      
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.settings.target }}
          path: target/${{ matrix.settings.target }}/release/camer*
          
  final-publish:
    name: "Publish To NPM"
    runs-on: ubuntu-latest
    needs: [build-rs]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: "${{ inputs.release_branch }}"
          
      - run: git fetch origin --tags
      
      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 6.15.1
          
      - name: Use Node v16
        uses: actions/setup-node@v3
        with:
          node-version: v16
          registry-url: https://registry.npmjs.org/
          cache: "pnpm"
          
      - name: Configure git
        run: |
          git config --global user.name 'hubvue'
          git config --global user.email 'cckcc.kim@gmail.com'
      
      - name: Download Apple ARM64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: aarch64-apple-darwin
          path: cli/dist-darwin-arm64
      
      - name: Download Ubuntn ARM64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: aarch64-unknown-linux-gnu
          path: cli/dist-windows-arm64
          
      - name: Download Windows ARM64(ships as x86_64) Artifacts
        uses: actions/download-artifact@v3
        with:
          name: x86_64-pc-windows-gnu
          path: cli/dist-windows-arm64
      
      - name: Download Ubuntu x86_64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: x86_64-unknown-linux-gnu
          path: cli/dist-linux-amd64
          
      - name: Download Apple x86_64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: x86_64-apple-darwin
          path: cli/dist-darwin-amd64
          
      - name: Download Windows x86_64 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: x86_64-pc-windows-gnu
          path: cli/dist-windows-amd64
          
      - name: Preform Release
        run: ls && tree . && cd cli && ls && tree .
      
      
      
